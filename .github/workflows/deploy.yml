name: Deployment
on:
  push:
    branches:
      - main
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Load & cach depandencies
        uses: ./.github/actions/cached-deps
        id: cache-deps
        with:
          caching: 'false'
      - name: Output Info
        run: echo "Cache used? ${{steps.cache-deps.outputs.used-cache}}" #| and as we know to get output , we set id in the step, and get the result of it
      - name: Lint code
        run: npm run lint
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Load & cach depandencies
        uses: ./.github/actions/cached-deps
      - name: Test code
        id: run-tests
        run: npm run test
      - name: Upload test report
        if: failure() && steps.run-tests.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test.json
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Load & cach depandencies
        uses: ./.github/actions/cached-deps
      - name: Build website
        run: npm run build
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-files
          path: ./dist
      - name: Output contents
        run: ls
      - name: Deploy site
        uses: ./.github/actions/deploy-s3-javascript #| here we use the js custom action
        env:
          # AWS_ACCESS_KEY_ID: AKIAWRU4UZYWB266LQXDl # WE CAN ADD these values but this is bad approach best is using secret
          # AWS_SECRET_ACCESS_KEY: VJAffJH2qnQGSd0Z8p3SWu3xZJozu74JTdNEyK1Q
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          #| these names are pre-defined in AWS , so AWS cli automnatically looking for them to authenticated the request

        with: # we need to pass and fill the input vauels
          bucket: gha—custom-action-hosting
          dist-folder: ./dist
        # bucket-region: us—east-2  we can fill this if we want tochange othewise this have a default val

  # Information: # |  and for using
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Get code
  #       uses: actions/checkout@v3
  #     - name: Run custom js Action
  #       uses: ./.github/actions/deploy-s3-javascript
# * so first action.yml , then main. js , and finally use it here

#| the node modules folder in the deploy-s3-javascript is not ignored! because your custom JavaScript actions must include all the code and all the dependencies that are required to run this action successfully. GitHub Actions will not download and install dependencies when it encounters a custom JavaScript action. Instead it expects that all the code is available that's needed to run this custom JavaScript code and that includes the code for third-party actions.

#* in git ignore /x means in root folder x , and x means any x folder
